java
servlet/jsp + spring mvc library
spring framework
html css javascript jQuery
oracle database


MVC(Model View Controller)
Model : 비지니스 계층(DB)
View : 프레젠테이션 계층(JSP)
Controller : 어플리케이션의 흐름을 담당(Servlet), View와 Model간의 인터페이스 역할

DispatcherServlet
Servlet/JSP 에서 사용자 요청이 발생하면 작동하는 첫 번째 서블릿
Spring MVC 프로젝트 설정에서 가장 먼저 해야 할 일은 DispatcherServlet 클래스를 
Spring MVC에서 재정의한 클래스로 설정하는 일이다.

SpringMVC 프로젝트 설정하는 방식 XML JAVA

pom.xml
servlet-api
jsp-api
jstl
springWebMVC

GetParameter6

Servlet / JSP 에서 파라미터 데이터를 추출할 때 HttpServletRequest 객체를 통하게 되는데
Spring MVC에서 이 객체를 통해서 주입 받아 사용한다.

WebRequest는 HttpServletRequest 클래스를 확장한 클래스

@PathVariable
데이터 요청 주소가 있을 경우 값을 주입 받을 수 있는 어노테이션
요청주소 / 값1 / 값2 / 값3

@RequestParam
파라미터 데이터를 직접 주입 받을 수 있다
지정된 변수의 이름과 파라미터의 이름이 같을 경우 값을 주입 받는다.
가능한 경우 형변환 처리도 해준다.
value : 파라미터의 이름과 변수의 이름이 다를 경우 파라미터 이름을 지정한다.
required : false를 설정하면 지정된 이름의 파라미터가 없을 경우 null이 주입된다.

GetParameterObject7
Map으로 주입받기
클라이언트가 전달하는 모든 파라미터 데이터를 한번에 Map으로 받는다
단 동일명으로 전달되는 2개 이상의 파라미터는 하나만 저장된다.
동일명으로 전달되는 파라미터가 2개 이상이라면 List로 주입받는다.

@ModelAtrribute 어노테이션을 사용하면 파라미터 객체로 주입받을 수 있다
전달되는 파라미터의 이름과 동일한 프로퍼티에 자동으로 주입된다.
생략가능
커맨드 객체(Command Object)라고 부른다.


ViewResolver8
컨트롤러에서 전달 받은 view의 이름을 토대로 jsp를 찾아 선택하고 jsp데이터를 분석해 응답 결과를 전달하는 요소

Spring MVC는 jsp를 처리할 때 HttpServletRequest 객체를 jsp쪽으로 전달한다.
ViewResolver는 이를 이용해 jsp작업시 데이터를 사용할 수 있다.

Model
Model 객체를 주입 받아 셋팅하면 HttpServletRequest 객체에 담겨 이를 jsp로 전달할 수 있다.

ModelAndView
ModelAndView는 Model에 값을 셋팅하는 기능과 View의 이름을 지정하는 기능을 모두 가지고 있다.

ViewResolver에 의해 jsp가 실행되고 응답결과가 만들어진다.
Controller에서 View를 지정할 때 ViewResolver가 사용할 데이터를 Request 영역에 저장할 수 있다.


CommandObject9
커맨드 객체
클라이언트가 전달해 주는 파라미터 데이터를 주입 받기 위해 사용하는 객체
커맨드 객체는 HttpServletRequest 객체에 자동으로 담기고 jsp로 전달된다.
이 때 HttpServletRequest 객체에 저장되는 이름은 클래스 이름으로 결정된다.
HttpServletRequest에 저장되는 이름을 지정하고 싶다면 ModelAttribute 어노테이션에 지정하면 된다.


FormCustomTag10
Spring 에서는 <form:태그명> 형태로 되어있는 커스텀 태그 제공
Form 커스텀 태그를 활용하면 Model 객체에 들어있는 값을 form 요소에 주입시킬 수 있다.
회원 정보 수정 등 정보 수정페이지를 구성할 때 요긴하게 사용할 수 있다.

새로운 요청이 발생해 응답 결과가 브라우저로 전달 될 떄까지 요청 정보가 담겨있는 Request 객체를 사용할 수 있다. 이 때 Request객체의 사용범위를 RequestScope라고 한다.
RequestScopeBeanJava15
RequestScopeBeanXml16
Bean을 정의할 때 request scope로 정의하면 요청이 발생할 때 마다 Bean 객체가 생성되어 자동으로 주입된다.
주입된 Bean은 요청 발생시 주입만 이루어지는 것이므로 request 영역에 저장되지는 않는다
Xml로 bean을 설정하고 byName으로 주입 받았을 경우에만 request 영역에 자동 저장된다.
Java방식은 @RequestScope를 사용
XML방식은 bean을 정의할 떄 scope = "request"로 설정한다

SessionScope17
브라우저가 최초의 요청을 발생시키고 브라우저를 닫을 때까지를 SessionScope라고 한다
Session 영역에 저장되어 있는 객체를 사용하고자 할 때 메서드의 매개변수로 @SessionAttribute를 설정하면
Session 영역에 저장되어 있는 Bean을 주입 받을 수 있다
@ModelAttribute를 통해 주입 받은 Bean은 자동으로 Request 영역에 저장되고 Request 영역으로부터 주입을 받는다
@ModelAttribute를 통해 주입받은 Bean을 @SessionAttribute로 지정해 놓으면 Request영역이 아닌 Session 영역으로 부터 주입 받을 수 있다.
이 떄 @ModelAttribute를 활용하여 객체를 생성해 반환하는 메서드를 반드시 작성해 줘야한다.
session 영역에 데이터를 저장하게 되면 SessionScope 내에서 사용이 가능

SessionScopeBeanJava18
SessionScopeBeanXml19
Bean을 정의할 때 SessionScope로 정의하면 브라우저가 서버에 최초로 요청할 때 Bean 객체가 주입된다.
주입된 Bean은 주입만 이루어지는 것이므로 Session 영역에 저장되지 않는다.
@Java : @SessionScope
XML : scope="session"

ApplicationScope20
서버가 가동될 때 부터 서버가 종료될 때까지 범위를 Application Scope라고 한다
ServletContext라는 클래스 타입의 객체로 관리된다
ServletContext에 저장된 데이터나 객체는 서버가 종료될 떄까지 웹브라우저와 상관없이 사용된다.
ServletContext는 HttpServletRequest 객체로부터 얻는다.
Controller에서 주입받을수 있다.

Eclipse Properties 한글 변환 문제 help =>
http://propedit.sourceforge.jp/eclipse/updates
http://osdn.net/projects/propedit/storage/eclipse/updates
Property Editor

24 Validate24
JSR 303 명세구격을 이용하여 유효성 검사 라이브러리 이용
hibernate 라이브러리 hibernate validation
Controller의 메서드에서 주입받는 Bean에 @Valid를 설정하여 유효성 검사
BindingResult 객체를 주입 받아야한다 이 객체에는 유효성 검사를 실행한 정보가 담겨있다.

25 ValidationMessage
https://beanvalidation.org/1.0/spec/  유효성검사 메소드 예시